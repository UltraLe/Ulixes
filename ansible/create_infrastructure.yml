---
  - name: Creating Infrastructure
    hosts: localhost
    vars:
      constants:
        memcached_port: 11211
        beat_port: 9999
        bootstrap_port: 11111
        frankfurt: eu-central-1
        milano: eu-south-1
        server_ami: ami-00edb93a4d68784e3
        server_ami_m: ami-01ce136ac703e9899
        key_name: KeyPairF
        key_name_m: KeyPair
        ulixes_port: 5005
        hermes_port: 8888
        cache_sub_group_name: memsubgroup
        cache_param_group: coolparamgroup

    tasks:
      - name: Creating VPC in Frankfurt
        ec2_vpc_net:
          name: Application_VPC_f
          cidr_block: 10.10.0.0/16
          region: "{{ constants.frankfurt }}"
          tenancy: default
          state: present
        register: vpc_f

      - name: Creating VPC in Milano!
        ec2_vpc_net:
          name: Application_VPC_m
          cidr_block: 10.10.0.0/16
          region: "{{ constants.milano }}"
          tenancy: default
          state: present
        register: vpc_m

      # Accedere all'id del gateway con {{igw.gateway_id}}
      - name: Creating gateway in Frankfurt
        ec2_vpc_igw:
          vpc_id: "{{ vpc_f.vpc.id }}"
          state: present
          region: "{{ constants.frankfurt }}"
        register: igw_f

      - name: Creating gateway in Milano
        ec2_vpc_igw:
          vpc_id: "{{ vpc_m.vpc.id }}"
          state: present
          region: "{{ constants.milano }}"
        register: igw_m    

      # creo 3 subnet, una per ogni regione
      - name: Create subnet a (Frankfurt)
        ec2_vpc_subnet:
          region: "{{ constants.frankfurt }}"
          state: present
          vpc_id: "{{ vpc_f.vpc.id }}"
          cidr: 10.10.1.0/24
          az: "{{ constants.frankfurt }}a"
          tags:
            Name: Subnet A
        register: subnet_a      

      - name: Create subnet b (Frankfurt)
        ec2_vpc_subnet:
          region: "{{ constants.frankfurt }}"
          state: present
          vpc_id: "{{ vpc_f.vpc.id }}"
          az: "{{ constants.frankfurt }}b"
          cidr: 10.10.2.0/24
          tags:
            Name: Subnet B
        register: subnet_b      

      - name: Create subnet c (Frankfurt)
        ec2_vpc_subnet:
          region: "{{ constants.frankfurt }}"
          state: present
          vpc_id: "{{ vpc_f.vpc.id }}"
          cidr: 10.10.3.0/24
          az: "{{ constants.frankfurt }}c"
          tags:
            Name: Subnet C
        register: subnet_c

      # creo 3 subnet, una per ogni regione milano
      - name: Create subnet a (Milano)
        ec2_vpc_subnet:
          region: "{{ constants.milano }}"
          state: present
          vpc_id: "{{ vpc_m.vpc.id }}"
          cidr: 10.10.1.0/24
          az: "{{ constants.milano }}a"
          tags:
            Name: Subnet A (M)
        register: subnet_a_m  

      - name: Create subnet b (Milano)
        ec2_vpc_subnet:
          region: "{{ constants.milano }}"
          state: present
          vpc_id: "{{ vpc_m.vpc.id }}"
          az: "{{ constants.milano }}b"
          cidr: 10.10.2.0/24
          tags:
            Name: Subnet B (M)
        register: subnet_b_m      

      - name: Create subnet c (Milano)
        ec2_vpc_subnet:
          region: "{{ constants.milano }}"
          state: present
          vpc_id: "{{ vpc_m.vpc.id }}"
          cidr: 10.10.3.0/24
          az: "{{ constants.milano }}c"
          tags:
            Name: Subnet C (M)
        register: subnet_c_m

      # Creazione Route table con le subnets create sopra
      - name: Creating the route table (Frankfurt)
        ec2_vpc_route_table:
          tags:
            rt: frankfurt
          vpc_id: "{{ vpc_f.vpc.id }}"
          region: "{{ constants.frankfurt }}"
          subnets:
            - "{{ subnet_a.subnet.id }}"
            - "{{ subnet_b.subnet.id }}"
            - "{{ subnet_c.subnet.id }}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw_f.gateway_id }}"
          state: present
        register: route_table

      # Creazione Route table con le subnets create sopra
      - name: Creating the route table (Milano)
        ec2_vpc_route_table:
          tags:
            rt: milan
          vpc_id: "{{ vpc_m.vpc.id }}"
          region: "{{ constants.milano }}"
          subnets:
            - "{{ subnet_a_m.subnet.id }}"
            - "{{ subnet_b_m.subnet.id }}"
            - "{{ subnet_c_m.subnet.id }}"
          routes:
            - dest: 0.0.0.0/0
              gateway_id: "{{ igw_m.gateway_id }}"
          state: present
        register: route_table_m     

      #Secutiry groups
      - name: Creating security groups for Load Balancer
        ec2_group:
          state: present
          name: SG LoadBalanced
          description: Inbound roules for Load Balancer
          vpc_id: "{{ vpc_f.vpc.id }}"
          region: "{{ constants.frankfurt }}"
          rules:
            - proto: tcp
              ports:
              - "{{ constants.ulixes_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 5005
        register: sg_LoadBalancer    

      - name: Creating security groups for Ulixes
        ec2_group:
          state: present
          name: SG Ulixes
          description: Inbound roules for Ulixes servers
          vpc_id: "{{ vpc_f.vpc.id }}"
          region: "{{ constants.frankfurt }}"
          rules:
            - proto: tcp
              from_port: "{{ constants.ulixes_port }}"
              to_port: "{{ constants.ulixes_port }}"
              group_id: "{{ sg_LoadBalancer.group_id }}"
            - proto: tcp
              ports:
              - "{{ constants.memcached_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on memcached port
            - proto: tcp
              ports:
              - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow ssh to set up
        register: sg_ulixes      

      - name: Creating security groups for Hermes
        ec2_group:
          state: present
          name: SG Hermes
          description: Inbound roules for Hermes servers
          vpc_id: "{{ vpc_m.vpc.id }}"
          region: "{{ constants.milano }}"
          rules:
            - proto: tcp
              ports:
              - "{{ constants.hermes_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 8888
            - proto: tcp
              ports:
              - "{{ constants.beat_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on beat port
            - proto: tcp
              ports:
              - "{{ constants.bootstrap_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on bootstrap port
            - proto: tcp
              ports:
              - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow ssh to set up
        register: sg_hermes     

      - name: Creating security groups for Pythia
        ec2_group:
          state: present
          name: SG Pythia
          description: Inbound roules for Pythia servers
          vpc_id: "{{ vpc_f.vpc.id }}"
          region: "{{ constants.frankfurt }}"
          rules:
            - proto: tcp
              ports:
              - "{{ constants.beat_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on beat port
            - proto: tcp
              ports:
              - "{{ constants.bootstrap_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on bootstrap port
            - proto: tcp
              ports:
              - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow ssh to set up  
        register: sg_pythia    

      - name: Creating security groups for Memcached
        ec2_group:
          state: present
          name: SG Memcached
          description: Inbound roules for Memcached servers
          vpc_id: "{{ vpc_f.vpc.id }}"
          region: "{{ constants.frankfurt }}"
          rules:
            - proto: tcp
              ports:
              - "{{ constants.memcached_port }}"
              group_id: "{{ sg_ulixes.group_id }}"
              rule_desc: allow all on beat port
        register: sg_memcached

      #Secutiry groups (milano)
      - name: Creating security groups for Hermes (Milano)
        ec2_group:
          state: present
          name: SG Hermes
          description: Inbound roules for Hermes servers
          vpc_id: "{{ vpc_m.vpc.id }}"
          region: "{{ constants.milano }}"
          rules:
            - proto: tcp
              ports:
              - "{{ constants.hermes_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 8888
            - proto: tcp
              ports:
              - "{{ constants.beat_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on beat port
            - proto: tcp
              ports:
              - "{{ constants.bootstrap_port }}"
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on bootstrap port
        register: sg_hermes

      # Memcached
      # Add or change a subnet group
      - name: Creating memcached subnet group
        elasticache_subnet_group:
          state: present
          name: "{{constants.cache_sub_group_name}}"
          description: What a cool subnetgroup
          region: "{{ constants.frankfurt }}"
          subnets: "{{ subnet_a.subnet.id }}"

      - name: 'Create a test parameter group'
        elasticache_parameter_group:
          name: "{{constants.cache_param_group}}"
          group_family: memcached1.4
          description: Cache parameter group
          state: present
          region: "{{constants.frankfurt}}"
        register: cache_param_group

      - name: Creating Memcached Cluster
        elasticache:
          cache_subnet_group: "{{constants.cache_sub_group_name}}"
          cache_parameter_group: "{{constants.cache_param_group}}"
          security_group_ids: "{{ sg_memcached.group_id }}"
          name: Memcached
          state: present
          engine: memcached
          cache_engine_version: 1.4.14
          node_type: cache.t2.small
          num_nodes: 3
          wait: yes
          cache_port: "{{constants.memcached_port}}"
          region: "{{constants.frankfurt}}"

      # EC2 instances for Hermes
      - name: Creating EC2 instance of Hermes server on subnet a
        ec2:
          tenancy: default
          assign_public_ip: yes
          instance_type: t3.micro
          group_id: "{{ sg_hermes.group_id }}"
          image: "{{ constants.server_ami_m }}"
          instance_tags:
            server: hermes sub a
          exact_count: 1
          count_tag: 
            server: hermes sub a
          key_name: "{{ constants.key_name_m }}"
          region: "{{ constants.milano }}"
          vpc_subnet_id: "{{ subnet_a_m.subnet.id }}"
          wait: yes
          wait_timeout: 320
        register: hermes1

      - name: Creating EC2 instance of Hermes server on subnet b
        ec2:
          tenancy: default
          assign_public_ip: yes
          instance_type: t3.micro
          group_id: "{{ sg_hermes.group_id }}"
          image: "{{ constants.server_ami_m }}"
          instance_tags:
            server: hermes sub b
          exact_count: 1
          count_tag: 
            server: hermes sub b
          key_name: "{{ constants.key_name_m }}"
          region: "{{ constants.milano }}"
          vpc_subnet_id: "{{ subnet_b_m.subnet.id }}"
          wait: yes
          wait_timeout: 320
        register: hermes2
        #IP: hermes2.instances.network_interfaces.association.public_ip


      # Creating EC2 instances for Ulixes
      - name: Creating EC2 instace of Ulixes server on subnet a
        ec2:
          tenancy: default
          assign_public_ip: yes
          instance_type: t2.micro
          group_id: "{{ sg_ulixes.group_id }}"
          image: "{{ constants.server_ami }}"
          instance_tags:
            server: ulixes sub a
          exact_count: 1
          count_tag: 
            server: ulixes sub a
          key_name: "{{ constants.key_name }}"
          region: "{{ constants.frankfurt }}"
          vpc_subnet_id: "{{ subnet_a.subnet.id }}"
          wait: yes
          wait_timeout: 320
        register: ulixes1


      # EC2 instances for Pythia
      - name: Creating EC2 instance of Pythia server on subnet a
        ec2:
          tenancy: default
          assign_public_ip: yes
          instance_type: t2.micro
          group_id: "{{ sg_pythia.group_id }}"
          image: "{{ constants.server_ami }}"
          instance_tags:
            server: pythia
          exact_count: 1
          count_tag: 
            server: pythia
          key_name: "{{ constants.key_name }}"
          region: "{{ constants.frankfurt }}"
          vpc_subnet_id: "{{ subnet_a.subnet.id }}"
          wait: yes
          wait_timeout: 320
        register: pythia1

      - name: Creating EC2 instance of Pythia server on subnet b
        ec2:
          tenancy: default
          assign_public_ip: yes
          instance_type: t2.micro
          group_id: "{{ sg_pythia.group_id }}"
          image: "{{ constants.server_ami }}"
          instance_tags:
            server: pythia
          exact_count: 1
          count_tag:
            server: pythia
          key_name: "{{ constants.key_name }}"
          region: "{{ constants.frankfurt }}"
          vpc_subnet_id: "{{ subnet_b.subnet.id }}"
          wait: yes
          wait_timeout: 320
        register: pythia2

      # Load Balancer ulixes
      - local_action:
          module: ec2_elb_lb
          name: "load-balancer-ulixes"
          state: present
          region: "{{ constants.frankfurt }}"
          security_group_ids: "{{ sg_LoadBalancer.group_id }}"
          subnets:
            - "{{ subnet_a.subnet.id }}"
            - "{{ subnet_b.subnet.id }}"
            - "{{ subnet_c.subnet.id }}"
          listeners:
            - protocol: tcp # options are http, https, ssl, tcp
              load_balancer_port: "{{ constants.ulixes_port }}"
              instance_port: "{{ constants.ulixes_port }}"
          health_check:
            ping_protocol: tcp # options are http, https, ssl, tcp
            ping_port: "{{ constants.ulixes_port }}"
            response_timeout: 5 # seconds
            interval: 30 # seconds
            unhealthy_threshold: 2
            healthy_threshold: 10
        register: ulixes_lb

      # Writing vpc ids on file
      - name: Writing subnet id a on file
        local_action: copy content="{{ subnet_a.subnet.id }}" dest=./subnet_id_a
      - name: Writing subnet id b on file
        local_action: copy content="{{ subnet_b.subnet.id }}" dest=./subnet_id_b
      - name: Writing subnet id c on file
        local_action: copy content="{{ subnet_c.subnet.id }}" dest=./subnet_id_c
      
      # Writing volumes Ids on file
      - name: Writing Ulixes id on file
        local_action: copy content="{{ ulixes1.tagged_instances[0].id }}" dest=./ulixes
      
      #Writing security group names on file
      - name: Writing Ulixes sg on file
        local_action: copy content="{{ sg_ulixes.group_id }}" dest=./ulixes_sg

      #Hermes info
      local_action:
          module: lineinfile
          dest: "../hermes1.conf"
          line: "1"
          create: yes
      local_action:
          module: lineinfile
          dest: "../hermes1.conf"
          line: "{{ hermes1.public_ip }}"
      
      #Hermes info
      local_action:
          module: lineinfile
          dest: "../hermes2.conf"
          line: "2"
          create: yes
      local_action:
          module: lineinfile
          dest: "../hermes2.conf"
          line: "{{ hermes2.public_ip }}"
    
      - name: Recover memcached info
        elasticache_info:
        register: memcached
        #IP: memcached.elasticache_clusters.cache_nodes.endpoint.address

      # registering Domains in DNS
      - name: Using no-ip API to register (free) memcached ip into dns
        command:
          cmd: python dnsUpdater.py memcached  {{ memcached.elasticache_clusters[0].cache_nodes[0].endpoint.address }}

      - name: Using no-ip API to register (free) ulixes ip into dns
        command:
          cmd: python dnsUpdater.py ulixes  {{ ulixes_lb.elb.dns_name }}

      #Elastic IP for pythia instances
      - name: Allocate a new elastic IP to pythia1
        ec2_eip:
          state: present
          region: "{{ constants.frankfurt }}"
          allow_reassociation: yes
          device_id: "{{ pythia1.instance_ids }}"
        register: eip1

      - name: allocate a new elastic IP to pythia2
        ec2_eip:
          state: present
          allow_reassociation: yes
          device_id: "{{ pythia2.instance_ids }}"
        register: eip2

      - debug:
          msg: "Pythia info: {{pythia1}}"


      #Regitering pythia domain name in a free service (...)
      - name: Registering Pythia1 IP in DNS
        command:
          cmd: python updatePythiaDns.py  {{ eip1.public_ip }} 1

      - name: Registering Pythia2 IP in DNS
        command:
          cmd: python updatePythiaDns.py  {{ eip2.public_ip }} 2


      # Cloud Front
      - cloudfront_distribution:
          state: present
          caller_reference: cloudfront resvag
          origins:
              - id: 'load balancer ulixes'
                domain_name: ulixes.resvag.com
          default_cache_behavior:
            target_origin_id: 'load balancer ulixes'
            forwarded_values:
              query_string: false
              cookies:
                forward: none
              headers:
               - '*'
            viewer_protocol_policy: allow-all
            smooth_streaming: true
            compress: true
            allowed_methods:
              items:
                - GET
                - HEAD
              cached_methods:
                - GET
                - HEAD
          comment: this is a cloudfront distribution for ulixes

